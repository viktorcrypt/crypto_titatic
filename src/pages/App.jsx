// src/pages/App.jsx
import { useEffect, useRef, useState } from "react";
import ShipScene from "../components/ShipScene.jsx";
import TokenDraggable from "../components/TokenDraggable.jsx";
import LifeboatDrop from "../components/LifeboatDrop.jsx";
import { TOKENS, CAPACITY } from "../lib/tokens.js";
import { deckPos } from "../lib/deck.js";
import PostRescuePanel from "../components/PostRescuePanel.jsx"; // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ

const BOAT_CAPACITY = CAPACITY;
const PHONK_BPM = 110; // ‚Üê –ø–æ–¥–≥–æ–Ω–∏ –ø–æ–¥ —Å–≤–æ–π —Ç—Ä–µ–∫ (100‚Äì140 –æ–∫)

// –ø–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ/–Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∞—É–¥–∏–æ
function fadeAudio(el, { to = 0, ms = 7000 }) { // ‚¨ÖÔ∏è 7 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (!el) return;
  const from = el.volume ?? 0.5;
  const steps = 60; // ‚¨ÖÔ∏è –ø–ª–∞–≤–Ω–µ–µ, —á–µ–º 20
  const dt = ms / steps;
  let i = 0;
  const id = setInterval(() => {
    i++;
    const v = from + (to - from) * (i / steps);
    el.volume = Math.max(0, Math.min(1, v));
    if (i >= steps) {
      clearInterval(id);
      if (to === 0) el.pause?.();
    }
  }, dt);
}

export default function AppPage() {
  const [boat, setBoat] = useState([]);
  const [sinking, setSinking] = useState(false);
  const [rescueDone, setRescueDone] = useState(false); // —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–æ–ª–ª—Ñ–µ–π—Å–æ–º –∏ —Ñ–æ–Ω–∫–æ–º
  const [showRecord, setShowRecord] = useState(false);  // ‚¨ÖÔ∏è –Ω–æ–≤–∞—è —Å–≤–µ—Ç–ª–∞—è —Å—Ü–µ–Ω–∞
  const stormRef = useRef(null);
  const phonkRef = useRef(null);
  const [muted, setMuted] = useState(false);

  useEffect(() => {
    const storm = stormRef.current;
    if (storm) {
      storm.volume = 0.25;
      storm.loop = true;
      storm.play().catch(() => {});
    }
  }, []);

  const getToken = (s) => TOKENS.find((t) => t.symbol === s);
  const isAlready = (s) => boat.some((t) => t.symbol === s);
  const used = () => boat.reduce((s, t) => s + t.weight, 0);

  function onDrop(symbol) {
    if (sinking) return;
    if (isAlready(symbol)) return;
    const t = getToken(symbol);
    if (!t) return;
    if (used() + t.weight > BOAT_CAPACITY) return;
    setBoat((b) => [...b, t]);
  }

  function onRemove(symbol) {
    if (sinking) return;
    setBoat((b) => b.filter((x) => x.symbol !== symbol));
  }

  async function handleRescue() {
    if (boat.length === 0 || sinking) return;

    const storm = stormRef.current;
    const phonk = phonkRef.current;

    // 1) –¢—Ä–æ–ª–ª—Ñ–µ–π—Å —Å—Ä–∞–∑—É
    setRescueDone(true);

    // 2) –§–æ–Ω–∫ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É –∏ –ø–ª–∞–≤–Ω–æ –Ω–∞–±–∏—Ä–∞–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å (7—Å)
    if (phonk) {
      phonk.loop = true;
      try {
        phonk.volume = 0.0;
        await phonk.play();
        fadeAudio(phonk, { to: 0.6, ms: 7000 });
      } catch (_) {}
    }

    // 3) –®—Ç–æ—Ä–º –ø–ª–∞–≤–Ω–æ –∑–∞—Ç—É—Ö–∞–µ—Ç (7—Å)
    if (storm) {
      fadeAudio(storm, { to: 0, ms: 7000 });
    }

    // 4) –ó–∞–ø—É—Å–∫–∞–µ–º —É—Ç–æ–ø–ª–µ–Ω–∏–µ/–æ—Ç–ø–ª—ã—Ç–∏–µ
    setSinking(true);

    // 5) –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (‚âà7.2—Å) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Å—Ü–µ–Ω—É —Å –∑–∞–ø–∏—Å—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    setTimeout(() => setShowRecord(true), 7200);
  }

  // —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è PostRescuePanel
  const getSymbols = () => boat.map((b) => b.symbol);
  function onRecorded() {
    // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Å—Ç/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî –æ—Å—Ç–∞–≤–ª—é —Ç–∏—Ö–æ
  }
  function onShowStats() {
    // TODO: –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É/–º–æ–¥–∞–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (Envio)
    alert("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Å–ø–∞—Å—ë–Ω–Ω—ã—Ö (Envio) ‚Äî –¥–æ–±–∞–≤–∏–º –¥–∞–ª—å—à–µ üëç");
  }
  function onDelegate() {
    // TODO: –º–æ–¥–∞–ª –¥–µ–ª–µ–≥–∞—Ü–∏–∏ MetaMask Smart Accounts
    alert("–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—É ‚Äî –¥–æ–±–∞–≤–∏–º –¥–∞–ª—å—à–µ üëç");
  }

  return (
    <div className="relative">
      {/* –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º beat/bpm ‚Äî –µ—Å–ª–∏ ShipScene –∏—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç */}
      <ShipScene sinking={sinking} beat={true} bpm={PHONK_BPM}>
        {/* mute */}
        <div className="absolute right-6 top-6 z-[200]" style={{ transform: "rotate(10deg)" }}>
          <button
            onClick={() => {
              const storm = stormRef.current;
              const phonk = phonkRef.current;
              const next = !muted;
              setMuted(next);
              if (storm) storm.muted = next;
              if (phonk) phonk.muted = next;
              // –µ—Å–ª–∏ —Ä–∞–∑–º—å—é—Ç–∏–º –ø–æ—Å–ª–µ —Ä–µ–∑–∫—å—é ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–æ–Ω–∫ –∏–≥—Ä–∞–µ—Ç
              if (!next && rescueDone && phonk && phonk.paused) {
                phonk.play().catch(() => {});
              }
              // –µ—Å–ª–∏ —Ä–∞–∑–º—å—é—Ç–∏–º –¥–æ —Ä–µ–∑–∫—å—é ‚Äî –≤–µ—Ä–Ω—ë–º —à—Ç–æ—Ä–º
              if (!next && !rescueDone && storm && storm.paused) {
                storm.play().catch(() => {});
              }
            }}
            className="rounded-lg bg-white/10 hover:bg-white/15 border border-white/20 px-3 py-1 text-sm"
          >
            {muted ? "Unmute" : "Mute"}
          </button>
        </div>

        {/* –∑–≤—É–∫–∏ */}
        <audio ref={stormRef} src="/sfx/storm.mp3" preload="auto" />
        <audio ref={phonkRef} src="/sfx/phonkmusic.mp3" preload="auto" />

        {/* –º–æ–Ω–µ—Ç—ã –Ω–∞ –ø–∞–ª—É–±–µ (–ø–æ–∫–∞ –Ω–µ —Ç–æ–Ω–µ–º) */}
        {!sinking &&
          TOKENS.filter((t) => !isAlready(t.symbol)).map((t) => (
            <TokenDraggable key={t.symbol} token={t} pos={deckPos(t.symbol)} />
          ))}

        {/* –®–ª—é–ø–∫–∞ + –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ä—è–¥–æ–º */}
        <div
          className={`absolute left-1/2 top-[47vh] -translate-x-1/2 z-[150] transition-transform duration-[7000ms] ease-in-out ${
            sinking ? "translate-x-[400px] translate-y-[-60px]" : ""
          }`} // ‚¨ÖÔ∏è –±—ã–ª–æ 5s, —Ç–µ–ø–µ—Ä—å 7000ms
          style={{ transform: "translateX(-50%) rotate(10deg)" }}
        >
          <LifeboatDrop
            picked={boat}
            capacity={BOAT_CAPACITY}
            onDrop={onDrop}
            onRemove={onRemove}
            svgSrc="/boats/boat.svg"
            width={560}
            rocking={!sinking}
          />

          <div className="mt-2 text-xs text-white/80 text-center" style={{ transform: "rotate(-10deg)" }}>
            Capacity: {used()}/{BOAT_CAPACITY}
          </div>

          <div className="mt-3 flex justify-center" style={{ transform: "rotate(-10deg)" }}>
            <button
              className="rounded-xl px-6 py-3 bg-blue-500 hover:bg-blue-600 shadow disabled:opacity-40"
              onClick={handleRescue}
              disabled={boat.length === 0}
            >
              –°–ø–∞—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            </button>
          </div>
        </div>

        {/* –¢—Ä–æ–ª–ª—Ñ–µ–π—Å: –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –∏ –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–≤–µ—Ä—Ö */}
        {rescueDone && (
          <img
            src="/troll.png"
            className="fixed bottom-8 right-8 w-28 h-28 z-[300] animate-troll-vibe pointer-events-none select-none"
            alt="trollface"
          />
        )}
      </ShipScene>

      {/* HUD ‚Äî –¥—É–±–ª—å –∫–Ω–æ–ø–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç) */}
      <div className="fixed inset-x-0 bottom-6 z-[200] flex justify-center pointer-events-none">
        <div className="pointer-events-auto flex items-center gap-4 rounded-2xl bg-black/40 border border-white/15 px-4 py-2 backdrop-blur">
          <span className="text-sm text-white/80">
            Capacity: {used()}/{BOAT_CAPACITY}
          </span>
          <button
            onClick={handleRescue}
            disabled={boat.length === 0}
            className="rounded-xl px-5 py-2 bg-blue-500 hover:bg-blue-600 shadow disabled:opacity-40"
          >
            SAVE COIN
          </button>
        </div>
      </div>

      {/* –°–≤–µ—Ç–ª–∞—è —Å—Ü–µ–Ω–∞ –ø–æ–≤–µ—Ä—Ö ‚Äî –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–Ω—á–∞–∏–Ω –±—É–¥–µ—Ç –≤ –Ω–µ–π) */}
      <PostRescuePanel
        open={showRecord}
        getSymbols={() => boat.map((b) => b.symbol)}
        onRecorded={() => {}}
        onShowStats={onShowStats}
        onDelegate={onDelegate}
      />

      <style>{`
        @keyframes trollVibe {
          0%, 100% { transform: translate(0,0) rotate(0deg); }
          25% { transform: translate(-4px, 2px) rotate(-2deg); }
          50% { transform: translate(3px, -3px) rotate(2deg); }
          75% { transform: translate(-2px, 3px) rotate(-3deg); }
        }
        .animate-troll-vibe {
          animation: trollVibe 0.25s infinite; /* —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ–ª—å—Ç–µ—à–∏–ª–æ */
        }
      `}</style>
    </div>
  );
}
